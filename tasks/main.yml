---

# ansible-galaxy role install geerlingguy.docker --force
- name: "include_role geerlingguy.docker"
  ansible.builtin.include_role:
    name: geerlingguy.docker
  vars:
    docker_edition: 'ce'
    docker_users: []
  tags:
    - docker
    - geerlingguy_docker

- name: pip install docker module
  ansible.builtin.pip:
    name:
      - docker
    state: latest

# TODO: auto detect unit file to support different OS (sample /lib/systemd/system/docker.service on Ubuntu)
- name: ensure docker only starts after successfull mounted network fs - check the unit file
  ansible.builtin.lineinfile:
    dest: /usr/lib/systemd/system/docker.service
    backrefs: True
    line: "{{ item.line }}"
    regexp: "{{ item.regexp + item.regexp2 }}"
  check_mode: true
  loop:
    - { line: '\1 remote-fs.target', regexp: '^(Requires=.*)', regexp2: '(\bremote\-fs\.target\b)' }
    - { line: '\1 remote-fs.target', regexp: '^(After=.*)', regexp2: '(\bremote\-fs\.target\b)' }
  register: _docker_service_modify_status
  changed_when: false
  when:
    - ansible_os_family == "RedHat"
  tags:
    - docker
    - docker_systemd

- name: ensure docker only starts after successfull mounted network fs -  modify the unit file
  ansible.builtin.lineinfile:
    dest: "{{ item.invocation.module_args.dest }}"
    backrefs: True
    line: "{{ item.item.line }}"
    regexp: "{{ item.item.regexp }}"
  check_mode: false
  loop: "{{ _docker_service_modify_status.results }}"
  register: _docker_service_modified
  when:
    - ansible_os_family == "RedHat"
    - item.msg | length == 0
  tags:
    - docker
    - docker_systemd

- name: reload systemd configuration
  ansible.builtin.systemd:
    daemon_reload: yes
  when: _docker_service_modified.changed | bool
  tags:
    - docker
    - docker_systemd

- name: docker | create docker network
  community.general.docker_network:
    name: "{{ DOCKER_NETWORK_NAME }}"
    appends: true
    #scope: "local"
    driver: 'bridge'
    driver_options: { com.docker.network.bridge.name: "{{ DOCKER_NETWORK_DEVICE_NAME }}" }
    ipam_config:
      - subnet: "{{ DOCKER_NETWORK_SUBNET }}"
        gateway: "{{ DOCKER_NETWORK_GATEWAY }}"
        iprange: "{{ DOCKER_NETWORK_IPRANGE | default(omit) }}"
        aux_addresses: "{{ DOCKER_NETWORK_AUX_ADDRESSES | default(omit) }}"
        #  host1: 172.3.27.3
        #  host2: 172.3.27.4
    state: present
    #force: yes
  when: DOCKER_NETWORKS | length > 0
  tags:
    - docker
    - docker_network

- name: collect facts about system services
  ansible.builtin.service_facts:
  register: services_state

- name: Debug
  ansible.builtin.debug:
    var: services_state.ansible_facts.services['firewalld.service'].state
  when:
    - services_state.ansible_facts.services['firewalld.service'].state is defined
    - services_state.ansible_facts.services['firewalld.service'].state == "running"
    - ansible_os_family == "RedHat"

- name: docker | add network interface docker0 to trusted networks
  ansible.posix.firewalld:
    zone: trusted
    interface: docker0
    immediate: yes
    permanent: yes
    state: enabled
  when:
    - services_state.ansible_facts.services['firewalld.service'].state is defined
    - services_state.ansible_facts.services['firewalld.service'].state == "running"
    - ansible_os_family == "RedHat"
